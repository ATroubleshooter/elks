// This file is automatically generated from syscall.dat
// See syscall.awk for details

	.code16

	.text

	.extern _syscall_0
	.extern _syscall_1
	.extern _syscall_2
	.extern _syscall_3
	.extern _syscall_4
	.extern _syscall_5

// CALL exit		+1	1	* c exit does stdio, _exit in crt0 

	.global _exit

_exit:
	mov $1,%ax
	jmp _syscall_1

// CALL fork		+2	0	  

	.global fork

fork:
	mov $2,%ax
	jmp _syscall_0

// CALL read		+3	3	  

	.global read

read:
	mov $3,%ax
	jmp _syscall_3

// CALL write		+4	3	  

	.global write

write:
	mov $4,%ax
	jmp _syscall_3

// CALL open		+5	3	  

	.global open

open:
	mov $5,%ax
	jmp _syscall_3

// CALL close		+6	1	  

	.global close

close:
	mov $6,%ax
	jmp _syscall_1

// CALL wait4		+7	4 

	.global wait4

wait4:
	mov $7,%ax
	jmp _syscall_4

// CALL link		+9	2	  

	.global link

link:
	mov $9,%ax
	jmp _syscall_2

// CALL unlink		+10	1	  

	.global unlink

unlink:
	mov $10,%ax
	jmp _syscall_1

// CALL execve		+11	3	* execve minix style 

	.global _execve

_execve:
	mov $11,%ax
	jmp _syscall_3

// CALL chdir		+12	1	  

	.global chdir

chdir:
	mov $12,%ax
	jmp _syscall_1

// CALL mknod		+14	3	  

	.global mknod

mknod:
	mov $14,%ax
	jmp _syscall_3

// CALL chmod		+15	2	  

	.global chmod

chmod:
	mov $15,%ax
	jmp _syscall_2

// CALL chown		+16	3	  

	.global chown

chown:
	mov $16,%ax
	jmp _syscall_3

// CALL brk		+17	1	* this is only to tell the system 

	.global _brk

_brk:
	mov $17,%ax
	jmp _syscall_1

// CALL stat		+18	2	  

	.global stat

stat:
	mov $18,%ax
	jmp _syscall_2

// CALL lseek		+19	3	* nb 2nd arg is an io ptr to long not a long. 

	.global _lseek

_lseek:
	mov $19,%ax
	jmp _syscall_3

// CALL getpid		+20	1	* this gets both pid & ppid 

	.global _getpid

_getpid:
	mov $20,%ax
	jmp _syscall_1

// CALL mount		+21	5	  

	.global mount

mount:
	mov $21,%ax
	jmp _syscall_5

// CALL umount		+22	1	  

	.global umount

umount:
	mov $22,%ax
	jmp _syscall_1

// CALL setuid		+23	1	  

	.global setuid

setuid:
	mov $23,%ax
	jmp _syscall_1

// CALL getuid		+24	1	* this gets both uid and euid 

	.global _getuid

_getuid:
	mov $24,%ax
	jmp _syscall_1

// CALL alarm		27	2 

	.global alarm

alarm:
	mov $27,%ax
	jmp _syscall_2

// CALL fstat		+28	2	  

	.global fstat

fstat:
	mov $28,%ax
	jmp _syscall_2

// CALL pause		29	0	  

	.global pause

pause:
	mov $29,%ax
	jmp _syscall_0

// CALL utime		+30	2	  

	.global utime

utime:
	mov $30,%ax
	jmp _syscall_2

// CALL chroot		+31	1 

	.global chroot

chroot:
	mov $31,%ax
	jmp _syscall_1

// CALL vfork		+32	0 

	.global vfork

vfork:
	mov $32,%ax
	jmp _syscall_0

// CALL access		+33	2	  

	.global access

access:
	mov $33,%ax
	jmp _syscall_2

// CALL nice		34	1 

	.global nice

nice:
	mov $34,%ax
	jmp _syscall_1

// CALL sleep		35	1 

	.global sleep

sleep:
	mov $35,%ax
	jmp _syscall_1

// CALL sync		+36	0	  

	.global sync

sync:
	mov $36,%ax
	jmp _syscall_0

// CALL kill		+37	2	  

	.global kill

kill:
	mov $37,%ax
	jmp _syscall_2

// CALL rename		+38	2	  

	.global rename

rename:
	mov $38,%ax
	jmp _syscall_2

// CALL mkdir		+39	2	  

	.global mkdir

mkdir:
	mov $39,%ax
	jmp _syscall_2

// CALL rmdir		+40	1	  

	.global rmdir

rmdir:
	mov $40,%ax
	jmp _syscall_1

// CALL dup		+41	1	. there is a fcntl lib function too. 

	.global dup

dup:
	mov $41,%ax
	jmp _syscall_1

// CALL pipe		+42	1	= config_pipe 

	.global pipe

pipe:
	mov $42,%ax
	jmp _syscall_1

// CALL times		43	2	* 2nd arg is pointer for long ret val. 

	.global _times

_times:
	mov $43,%ax
	jmp _syscall_2

// CALL dup2		+45	2 

	.global dup2

dup2:
	mov $45,%ax
	jmp _syscall_2

// CALL setgid		+46	1	  

	.global setgid

setgid:
	mov $46,%ax
	jmp _syscall_1

// CALL getgid		47	1	* this gets both gid and egid 

	.global _getgid

_getgid:
	mov $47,%ax
	jmp _syscall_1

// CALL signal		+48	2	* have put the despatch table in user space. 

	.global _signal

_signal:
	mov $48,%ax
	jmp _syscall_2

// CALL fcntl		+50	3	  

	.global fcntl

fcntl:
	mov $50,%ax
	jmp _syscall_3

// CALL ioctl		+54	3	. make this and fcntl the same ? 

	.global ioctl

ioctl:
	mov $54,%ax
	jmp _syscall_3

// CALL reboot		+55	3	. the magic number is 0xfee1,0xdead,... 

	.global reboot

reboot:
	mov $55,%ax
	jmp _syscall_3

// CALL lstat		+57	2 

	.global lstat

lstat:
	mov $57,%ax
	jmp _syscall_2

// CALL symlink		+58	2 

	.global symlink

symlink:
	mov $58,%ax
	jmp _syscall_2

// CALL readlink	+59	3 

	.global readlink

readlink:
	mov $59,%ax
	jmp _syscall_3

// CALL umask		+60	1	  

	.global umask

umask:
	mov $60,%ax
	jmp _syscall_1

// CALL settimeofday	+61	2 

	.global settimeofday

settimeofday:
	mov $61,%ax
	jmp _syscall_2

// CALL gettimeofday	+62	2 

	.global gettimeofday

gettimeofday:
	mov $62,%ax
	jmp _syscall_2

// CALL select		+63	5	. 5 paramaters is possible 

	.global select

select:
	mov $63,%ax
	jmp _syscall_5

// CALL readdir		+64	3	* 

	.global _readdir

_readdir:
	mov $64,%ax
	jmp _syscall_3

// CALL fchown		+66	3 

	.global fchown

fchown:
	mov $66,%ax
	jmp _syscall_3

// CALL setsid		+68	0 

	.global setsid

setsid:
	mov $68,%ax
	jmp _syscall_0

// CALL socket		+69	3	= config_socket 

	.global socket

socket:
	mov $69,%ax
	jmp _syscall_3

// CALL bind		+70	3	= config_socket 

	.global bind

bind:
	mov $70,%ax
	jmp _syscall_3

// CALL listen		+71	2	= config_socket 

	.global listen

listen:
	mov $71,%ax
	jmp _syscall_2

// CALL accept		+72	3	= config_socket 

	.global accept

accept:
	mov $72,%ax
	jmp _syscall_3

// CALL connect		+73	3	= config_socket 

	.global connect

connect:
	mov $73,%ax
	jmp _syscall_3

// CALL knlvsn		+74	1	= config_sys_version 

	.global knlvsn

knlvsn:
	mov $74,%ax
	jmp _syscall_1

