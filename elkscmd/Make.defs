# ***** IMPORTANT NOTE *****
#
# This file has been revised to remove the requirement that the elkscmd
# and elks trees are located under /usr/src on the developer's system.
# This requires that the variable BASEDIR be defined in every Makefile
# that includes this header file, prior to including it, and the value
# given to BASEDIR is required to be the relative path from the directory
# containing that Makefile to the directory containing this file.
#
# In addition, if there are any local definitions that need including in
# the CFLAGS value, those should be assigned to LOCALFLAGS before including
# this file.
#
# So as to ensure this, it is recommended that the following three lines
# be used as the first three lines of each Makefile including this file:
#
#	BASEDIR = ...
#
#	LOCALFLAGS = ...
#
#	include $(BASEDIR)/Make.defs
#
# This ensures that the correct value is assigned by using it to include
# this file.
#
##############################################################################

ifndef TOPDIR
$(error TOPDIR is not defined)
endif

include $(TOPDIR)/Make.defs

##############################################################################
#
# Define type of target for creating boot file system on. Valid target types
# are as follows:
#
#	DIRECT		Mount /dev/fd0 and create image thereon, then create
#			the image file as an image of /dev/fd0 instead. This
#			requires that a diskette of at least the necessary
#			size is in the drive when the images are created.
#
#	LOOP		Mount a file as a loopback file system. This requires
#			that the command is run as the superuser.
#
#	RAMDISK 	Mount /dev/ram0 and create image thereon, then create
#			the image file as an image of /dev/fd0 instead. This
#			requires that ramdisks are enabled in the kernel, and
#			also that there be an entry in /etc/fstab that allows
#			any user to mount this device, but otherwise avoids
#			the limitations of the other two options.
#
#	DIR			Do not use block device at all. Build the image by
#			copying from the build directories to an image directory,
#			then use a "mk*fs" tool to compile it into a binary image.
#			This target type is typically used by ROMFS (mkromfs).
#
# Each option has both advantages and disadvantages, and it is up to the
# developer to determine the appropriate one to use.

TARGET_MODE=LOOP

##############################################################################
#
# Specify platform to compile for. The following platforms are defined:
#
#	i86-ELKS	ELKS on an ix86 processor.
#
#	DEFAULT 	Anything not otherwise defined above.
#
# Select the relevant option here.

PLATFORM=i86-ELKS

##############################################################################
#
# It is not normally necessary to make changes below this line.
#
# Specify directories.

HOMEDIR=$(shell cd $(BASEDIR)/.. ; pwd)

ELKS_DIR=$(HOMEDIR)/elks
ELKSCMD_DIR=$(HOMEDIR)/elkscmd

INCLUDES=-I$(TOPDIR)/include -I$(ELKS_DIR)/include

##############################################################################
#
# Determine the ELKS kernel version.

E_V=$(shell if [ -f $(ELKS_DIR)/Makefile-rules ]; then \
		grep -v '^\#' $(ELKS_DIR)/Makefile-rules \
		    | fgrep = | head -4 | tr '\#' = | cut -d = -f 2 ;\
	    else echo Version not known ; fi)

ELKS_VSN=$(shell printf '%s.%s.%s-pre%s' $(E_V) | sed 's/-pre$$//')

##############################################################################
#
# Determine compiler variables for this target.

ifeq ($(PLATFORM),i86-ELKS)
	CC=bcc
	CFLBASE=-0 -O -ansi
	LDFLAGS=-s -ansi
	CHECK=gcc -c -o .null.o -Wall -pedantic
endif

ifeq ($(PLATFORM),DEFAULT)
	CC=cc
	CFLBASE=
	LDFLAGS=
	CHECK=cc -c -o .null.o
endif

CFLAGS=$(CFLBASE) $(LOCALFLAGS) $(INCLUDES) -D__ELKS__ -DELKS_VERSION=\"$(ELKS_VSN)\"

LD=ld86

##############################################################################
#
# Standard compilation rules.

.c.s:
	$(CC) $(CFLAGS) -S -o $*.o $<

.s.o:
	$(AS) $(ASFLAGS) -o $*.o $<

.S.s:
	gcc -E -traditional $(INCLUDES) $(CCDEFS) -o $*.s $<

.c.o:
	$(CC) $(CFLAGS) -c -o $*.o $<

##############################################################################
#
# Standard targets.

COMB_TARGET_FS=$(ELKSCMD_DIR)/comb
COMB_TARGET_BLKS=720

FULL1680_TARGET_FS=$(ELKSCMD_DIR)/full1680
FULL1680_TARGET_BLKS=1680

FULL3_TARGET_FS=$(ELKSCMD_DIR)/full3
FULL3_TARGET_BLKS=1440

FULL5_TARGET_FS=$(ELKSCMD_DIR)/full5
FULL5_TARGET_BLKS=1200

ROOT_TARGET_FS=$(ELKSCMD_DIR)/root
ROOT_TARGET_BLKS=360

COMB360_TARGET_FS=$(ELKSCMD_DIR)/comb360
COMB360_TARGET_BLKS=360

COMB_NET_TARGET_FS=$(ELKSCMD_DIR)/comb_net
COMB_NET_TARGET_BLKS=720

SIBO_TARGET_FS=$(ELKSCMD_DIR)/sibo
SIBO_TARGET_BLKS=128

MKFS=/sbin/mkfs.minix
MKFS_OPTS=-n14 -1 -i360

MINIX_BOOT=$(ELKSCMD_DIR)/bootblocks

##############################################################################
#
# Select the target device depending on the above entry.

ifeq ($(TARGET_MODE),FLOPPY)
TARGET_MNT=/dev/fd0
LOOP=
endif

ifeq ($(TARGET_MODE),LOOP)
TARGET_MNT=$(TOPDIR)/target
LOOP=-o loop
endif

ifeq ($(TARGET_MODE),RAM)
TARGET_MNT=$(ELKSCMD_DIR)/x
LOOP=
endif

ifeq ($(TARGET_MODE),DIR)
TARGET_MNT=$(ELKSCMD_DIR)/RootFS
LOOP=
endif

##############################################################################
#
# Include standard rules.

me:
	make -C $(BASEDIR) all

$(ELKS_DIR)/include/autoconf.h:
	make -C $(ELKS_DIR) include/autoconf.h

##############################################################################
# EOF #
#######
